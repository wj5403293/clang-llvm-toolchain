name: clang-llvm-toolchain

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'LLVM GitHub发布版本号'
        required: true 
        type: string

jobs:
  build-clang-llvm-toolchain:
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: 检出仓库的默认分支
        uses: actions/checkout@v3

      - name: 安装构建依赖项
        run: sudo apt-get update && sudo apt-get install -y curl build-essential python3 python3-distutils cmake ninja-build

      - name: 为构建安装创建目录
        run: mkdir llvm-project stage1 x86_64-linux-llvm-toolchain build-stage1 build-stage2

      - name: 下载LLVM项目发布版的压缩包
        run: curl --location https://github.com/llvm/llvm-project/releases/download/llvmorg-${{ inputs.version }}/llvm-project-${{ inputs.version }}.src.tar.xz -o llvm-project.tar.xz

      - name: 解压LLVM项目
        run: tar -xf llvm-project.tar.xz -C llvm-project --strip-components 1

      - name: 为x86_64修补compiler-rt以支持float128内置函数
        run: |
          perl -pi -e 's/#if __LDBL_MANT_DIG__ == 113 && defined\(__SIZEOF_INT128__\)/#if (__LDBL_MANT_DIG__ == 113 || defined(__x86_64__)) && defined(__SIZEOF_INT128__)/g' llvm-project/compiler-rt/lib/builtins/fp_lib.h
          perl -pi -e 's/typedef long double fp_t;/#if defined(__FLOAT128__) || defined(__SIZEOF_FLOAT128__)\ntypedef __float128 fp_t;\n#else\ntypedef long double fp_t;\n#endif/g' llvm-project/compiler-rt/lib/builtins/fp_lib.h

      - name: 使用CMake进行第一阶段配置
        run: cmake -S llvm-project/llvm -B build-stage1 -G Ninja -DCMAKE_INSTALL_PREFIX=stage1 -DCMAKE_BUILD_TYPE=Release -DLLVM_ENABLE_PROJECTS="clang;lld" -DLLVM_ENABLE_RUNTIMES="compiler-rt;libunwind;libcxx;libcxxabi" -DLLVM_TARGETS_TO_BUILD=X86 -DLLVM_ENABLE_PER_TARGET_RUNTIME_DIR=OFF -DLLVM_INSTALL_TOOLCHAIN_ONLY=ON -DLLVM_INCLUDE_BENCHMARKS=OFF -DLLVM_INCLUDE_EXAMPLES=OFF -DLLVM_INCLUDE_TESTS=OFF -DCLANG_DEFAULT_UNWINDLIB=libunwind -DCLANG_DEFAULT_RTLIB=compiler-rt -DCLANG_DEFAULT_CXX_STDLIB=libc++ -DCLANG_DEFAULT_LINKER=lld -DLIBUNWIND_USE_COMPILER_RT=Yes -DLIBCXX_USE_COMPILER_RT=YES -DLIBCXXABI_USE_COMPILER_RT=YES -DLIBCXXABI_USE_LLVM_UNWINDER=YES -DBUILTINS_CMAKE_ARGS="-DLLVM_ENABLE_PER_TARGET_RUNTIME_DIR=OFF" -DRUNTIMES_CMAKE_ARGS="-DLLVM_ENABLE_PER_TARGET_RUNTIME_DIR=OFF" -DLLVM_ENABLE_LIBXML2=OFF

      - name: 使用Ninja进行第一阶段构建
        run: ninja -C build-stage1 install

      - name: 使用CMake进行第二阶段配置
        run: cmake -S llvm-project/llvm -B build-stage2 -G Ninja -DCMAKE_C_COMPILER="$(pwd)/stage1/bin/clang" -DCMAKE_CXX_COMPILER="$(pwd)/stage1/bin/clang++" -DCMAKE_INSTALL_PREFIX=x86_64-linux-llvm-toolchain -DCMAKE_BUILD_TYPE=Release -DLLVM_ENABLE_PROJECTS="clang;lld;compiler-rt;libunwind;libcxx;libcxxabi" -DLLVM_TARGETS_TO_BUILD=X86 -DLLVM_ENABLE_PER_TARGET_RUNTIME_DIR=OFF -DLLVM_INSTALL_TOOLCHAIN_ONLY=ON -DLLVM_INCLUDE_BENCHMARKS=OFF -DLLVM_INCLUDE_EXAMPLES=OFF -DLLVM_INCLUDE_TESTS=OFF -DCLANG_DEFAULT_UNWINDLIB=libunwind -DCLANG_DEFAULT_RTLIB=compiler-rt -DCLANG_DEFAULT_CXX_STDLIB=libc++ -DCLANG_DEFAULT_LINKER=lld -DLIBUNWIND_USE_COMPILER_RT=Yes -DLIBCXX_USE_COMPILER_RT=YES -DLIBCXXABI_USE_COMPILER_RT=YES -DLIBCXXABI_USE_LLVM_UNWINDER=YES -DLLVM_ENABLE_LIBCXX=ON -DCOMPILER_RT_CXX_LIBRARY=libcxx -DBUILTINS_CMAKE_ARGS="-DLLVM_ENABLE_PER_TARGET_RUNTIME_DIR=OFF" -DRUNTIMES_CMAKE_ARGS="-DLLVM_ENABLE_PER_TARGET_RUNTIME_DIR=OFF" -DLLVM_ENABLE_LIBXML2=OFF -DLIBCXX_HAS_ATOMIC_LIB=OFF -DLIBCXX_ENABLE_STATIC_ABI_LIBRARY=ON

      - name: 使用Ninja进行第二阶段构建
        run: |
          export LD_LIBRARY_PATH="$(pwd)/stage1/lib"
          ninja -C build-stage2 install

      - name: 检查第二阶段的链接情况
        run: |
          ldd x86_64-linux-llvm-toolchain/bin/ld.lld
          unset LD_LIBRARY_PATH
          ldd x86_64-linux-llvm-toolchain/bin/ld.lld

      - name: 压缩第二阶段的工具链
        run: tar -czf x86_64-linux-llvm-toolchain.tar.gz x86_64-linux-llvm-toolchain

      - name: 创建GitHub发布版本
        run: |
          TAG=$(echo "${{ inputs.version }}_$(date +'%b-%d-%Y')-$(date -d "1970-01-01 UTC $(date +%T)" +%s)s")
          gh release create "${TAG}" x86_64-linux-llvm-toolchain.tar.gz
